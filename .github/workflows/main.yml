name: Full Pipeline

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [ "master" ]
    
jobs: 
  infra-test: 
    outputs:
      aws-ecr-repository-name: ${{ steps.output-vars.outputs.aws-ecr-repository-name }}
    name: Infrastructure Test
    concurrency: test-environment
    runs-on: ubuntu-latest
    environment: test
    defaults:
      run:
        working-directory: './infra/environments/test'
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: get kafka topic config
        working-directory: './packages/kafka'
        run: |
          yarn
          yarn export-topics

      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
      - run: terraform init
      - name: create tfvars file
        uses: DamianReeves/write-file-action@master
        with:
          path: ./infra/environments/test/test.tfvars
          write-mode: overwrite
          contents: |
            discord_token="${{ secrets.DISCORD_TOKEN }}"
            postgres_password="${{ secrets.POSTGRES_PASSWORD }}"
            aws_access_key="${{ vars.AWS_TOKEN_USERNAME }}"
            aws_access_secret="${{ secrets.AWS_TOKEN_PASSWORD }}"
            upstash_api_key="${{ secrets.UPSTASH_API_KEY }}"
            upstash_email="${{ secrets.UPSTASH_EMAIL }}"

      - name: terraform plan
        run: terraform plan -no-color -var-file="test.tfvars"

      - name: terraform apply
        if: ${{ steps.plan.outputs.exitcode }} = 2
        run: terraform apply -no-color -auto-approve -var-file="test.tfvars"

      - name: terraform output json
        run: terraform output -json > output.json

      - name: get variables from json
        id: output-vars
        run: |
          echo "::set-output name=aws-ecr-repository-name::$(jq -r '.aws-ecr-repository-name.value' output.json)"
        
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: infra-test
    environment: test
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_TOKEN_USERNAME }}
          aws-secret-access-key: ${{ secrets.AWS_TOKEN_PASSWORD }}
          aws-region: ap-southeast-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ needs.infra-test.outputs.aws-ecr-repository-name }}
          IMAGE_TAG: nodejs_demo_image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
